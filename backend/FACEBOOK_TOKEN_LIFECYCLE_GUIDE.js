/**
 * FACEBOOK FANPAGE ACCESS TOKEN - TH·ªúI GIAN S·ªêNG V√Ä C√ÅCH L·∫§Y TOKEN D√ÄI H·∫†N
 * Complete Guide to Facebook Page Access Token Lifecycle
 */

console.log(`
===================================================================
‚è∞ TH·ªúI GIAN S·ªêNG C·ª¶A FACEBOOK FANPAGE ACCESS TOKEN
===================================================================

üìÖ C√ÅC LO·∫†I TOKEN V√Ä TH·ªúI GIAN S·ªêNG:

1. üïê SHORT-LIVED USER ACCESS TOKEN (1-2 gi·ªù)
   - ƒê∆∞·ª£c t·∫°o khi user ƒëƒÉng nh·∫≠p Facebook l·∫ßn ƒë·∫ßu
   - H·∫øt h·∫°n sau 1-2 gi·ªù
   - D√πng ƒë·ªÉ exchange sang long-lived token

2. üïï LONG-LIVED USER ACCESS TOKEN (60 ng√†y)
   - Exchange t·ª´ short-lived token
   - S·ªëng 60 ng√†y
   - C√≥ th·ªÉ refresh ƒë·ªÉ gia h·∫°n

3. üïò PAGE ACCESS TOKEN (KH√îNG H·∫æT H·∫†N)
   - ƒê∆∞·ª£c t·∫°o t·ª´ long-lived user token
   - KH√îNG H·∫æT H·∫†N n·∫øu:
     ‚úÖ User v·∫´n l√† admin c·ªßa page
     ‚úÖ App v·∫´n c√≥ quy·ªÅn truy c·∫≠p
     ‚úÖ User kh√¥ng ƒë·ªïi m·∫≠t kh·∫©u Facebook
     ‚úÖ User kh√¥ng b·ªã kh√≥a t√†i kho·∫£n

===================================================================

üéØ C√ÅCH L·∫§Y PAGE ACCESS TOKEN D√ÄI H·∫†N (NEVER EXPIRES)
===================================================================

B∆Ø·ªöC 1: L·∫§Y SHORT-LIVED USER TOKEN
---------------------------------
C√°ch 1 - Graph API Explorer:
‚Ä¢ V√†o: https://developers.facebook.com/tools/explorer/
‚Ä¢ Ch·ªçn App c·ªßa b·∫°n
‚Ä¢ Ch·ªçn permissions: pages_manage_metadata, pages_show_list
‚Ä¢ Generate Access Token (short-lived)

C√°ch 2 - Facebook Login SDK:
‚Ä¢ T√≠ch h·ª£p Facebook Login v√†o app
‚Ä¢ User ƒëƒÉng nh·∫≠p v√† c·∫•p quy·ªÅn
‚Ä¢ Nh·∫≠n short-lived token t·ª´ response

B∆Ø·ªöC 2: EXCHANGE SANG LONG-LIVED USER TOKEN
------------------------------------------
API Call:
GET https://graph.facebook.com/oauth/access_token
    ?grant_type=fb_exchange_token
    &client_id={YOUR_APP_ID}
    &client_secret={YOUR_APP_SECRET}
    &fb_exchange_token={SHORT_LIVED_TOKEN}

Response:
{
    "access_token": "LONG_LIVED_USER_TOKEN",
    "token_type": "bearer",
    "expires_in": 5183999  // ~60 days
}

B∆Ø·ªöC 3: L·∫§Y PAGE ACCESS TOKEN (NEVER EXPIRES)
--------------------------------------------
API Call:
GET https://graph.facebook.com/me/accounts
    ?access_token={LONG_LIVED_USER_TOKEN}

Response:
{
    "data": [
        {
            "access_token": "PAGE_ACCESS_TOKEN_NEVER_EXPIRES",
            "category": "Business",
            "name": "Your Page Name",
            "id": "PAGE_ID",
            "tasks": ["MANAGE", "CREATE_CONTENT", "MODERATE", "ADVERTISE", "ANALYZE"]
        }
    ]
}

===================================================================

üõ†Ô∏è IMPLEMENTATION CODE EXAMPLES
===================================================================

JavaScript Implementation:
--------------------------
async function getLongLivedPageToken(shortLivedToken, appId, appSecret) {
    // Step 1: Exchange for long-lived user token
    const userTokenResponse = await fetch(\`https://graph.facebook.com/oauth/access_token?\` +
        \`grant_type=fb_exchange_token&\` +
        \`client_id=\${appId}&\` +
        \`client_secret=\${appSecret}&\` +
        \`fb_exchange_token=\${shortLivedToken}\`
    );
    
    const userTokenData = await userTokenResponse.json();
    const longLivedUserToken = userTokenData.access_token;
    
    // Step 2: Get page tokens
    const pageTokenResponse = await fetch(\`https://graph.facebook.com/me/accounts?\` +
        \`access_token=\${longLivedUserToken}\`
    );
    
    const pageTokenData = await pageTokenResponse.json();
    
    return pageTokenData.data; // Array of pages with never-expiring tokens
}

Node.js/NestJS Implementation:
-----------------------------
@Injectable()
export class FacebookTokenService {
    async exchangeForPageToken(shortLivedToken: string): Promise<PageToken[]> {
        // Exchange for long-lived user token
        const userTokenUrl = \`https://graph.facebook.com/oauth/access_token?\` +
            \`grant_type=fb_exchange_token&\` +
            \`client_id=\${process.env.FACEBOOK_APP_ID}&\` +
            \`client_secret=\${process.env.FACEBOOK_APP_SECRET}&\` +
            \`fb_exchange_token=\${shortLivedToken}\`;
            
        const userTokenResponse = await fetch(userTokenUrl);
        const userTokenData = await userTokenResponse.json();
        
        // Get page tokens
        const pageTokenUrl = \`https://graph.facebook.com/me/accounts?\` +
            \`access_token=\${userTokenData.access_token}\`;
            
        const pageTokenResponse = await fetch(pageTokenUrl);
        const pageTokenData = await pageTokenResponse.json();
        
        return pageTokenData.data;
    }
}

===================================================================

‚ö†Ô∏è C√ÅC TR∆Ø·ªúNG H·ª¢P TOKEN S·∫º H·∫æT H·∫†N/INVALID
===================================================================

1. üë§ USER-RELATED ISSUES:
   ‚Ä¢ User b·ªã remove kh·ªèi page admin
   ‚Ä¢ User ƒë·ªïi m·∫≠t kh·∫©u Facebook
   ‚Ä¢ User b·ªã kh√≥a/v√¥ hi·ªáu h√≥a t√†i kho·∫£n
   ‚Ä¢ User revoke quy·ªÅn truy c·∫≠p c·ªßa app

2. üè¢ PAGE-RELATED ISSUES:
   ‚Ä¢ Page b·ªã unpublish/x√≥a
   ‚Ä¢ Page b·ªã Facebook restrict
   ‚Ä¢ Page ƒë·ªïi category (hi·∫øm)

3. üì± APP-RELATED ISSUES:
   ‚Ä¢ App b·ªã Facebook reject/suspend
   ‚Ä¢ App permissions b·ªã revoke
   ‚Ä¢ App secret b·ªã thay ƒë·ªïi

4. üîí SECURITY ISSUES:
   ‚Ä¢ Token b·ªã leak/expose c√¥ng khai
   ‚Ä¢ Suspicious activity detected
   ‚Ä¢ Rate limiting violations

===================================================================

üîÑ CHI·∫æN L∆Ø·ª¢C QU·∫¢N L√ù TOKEN D√ÄI H·∫†N
===================================================================

1. ‚úÖ TOKEN HEALTH MONITORING:
   ‚Ä¢ Ki·ªÉm tra token ƒë·ªãnh k·ª≥ (m·ªói 6-12 gi·ªù)
   ‚Ä¢ Log all API calls v√† response codes
   ‚Ä¢ Set up alerts khi token fail

2. üîÅ AUTO-REFRESH MECHANISM:
   ‚Ä¢ Refresh long-lived user token tr∆∞·ªõc khi h·∫øt h·∫°n (7 ng√†y tr∆∞·ªõc)
   ‚Ä¢ Re-generate page tokens t·ª´ refreshed user token
   ‚Ä¢ Update database with new tokens

3. üõ°Ô∏è BACKUP STRATEGY:
   ‚Ä¢ Store multiple valid tokens per page
   ‚Ä¢ Use different admin accounts as backup
   ‚Ä¢ Implement failover mechanism

4. üì¢ NOTIFICATION SYSTEM:
   ‚Ä¢ Email alerts khi token s·∫Øp h·∫øt h·∫°n
   ‚Ä¢ Dashboard warnings cho admins
   ‚Ä¢ Slack/Teams notifications

===================================================================

üéâ K·∫æT LU·∫¨N V·ªÄ PAGE ACCESS TOKEN
===================================================================

PAGE ACCESS TOKEN l√† lo·∫°i token T·ªêT NH·∫§T cho Fanpage v√¨:

‚úÖ KH√îNG H·∫æT H·∫†N (never expires)
‚úÖ C√≥ t·∫•t c·∫£ permissions c·∫ßn thi·∫øt
‚úÖ Stable v√† reliable cho production
‚úÖ C√≥ th·ªÉ s·ª≠ d·ª•ng cho webhook, posting, reading

üîë ƒêI·ªÄU QUAN TR·ªåNG:
- Lu√¥n l∆∞u tr·ªØ PAGE ACCESS TOKEN, kh√¥ng ph·∫£i User Token
- Monitor token health th∆∞·ªùng xuy√™n  
- C√≥ backup plan khi token fail
- Implement proper error handling

V·ªõi strategy ƒë√∫ng, Page Access Token c√≥ th·ªÉ ho·∫°t ƒë·ªông 
·ªïn ƒë·ªãnh trong NHI·ªÄU NƒÇM m√† kh√¥ng c·∫ßn can thi·ªáp!

===================================================================
`);

// Detailed troubleshooting guide
console.log(`
üîç TROUBLESHOOTING COMMON TOKEN ISSUES:

Issue: Token returns Error 190 (Invalid OAuth access token)
Solution: Token ƒë√£ h·∫øt h·∫°n ho·∫∑c invalid, c·∫ßn t·∫°o m·ªõi

Issue: Token returns Error 102 (API session limit)  
Solution: Gi·∫£m frequency c·ªßa API calls, implement rate limiting

Issue: Permission denied errors
Solution: Ki·ªÉm tra l·∫°i permissions khi generate token

Issue: Token works in Graph Explorer but not in app
Solution: ƒê·∫£m b·∫£o s·ª≠ d·ª•ng ƒë√∫ng App ID/Secret trong production

Issue: Token suddenly stops working
Solution: Check if user still admin of page, page still active

üìû SUPPORT RESOURCES:
- Facebook Developer Community: https://developers.facebook.com/community/
- Graph API Documentation: https://developers.facebook.com/docs/graph-api/
- Access Token Debugger: https://developers.facebook.com/tools/debug/accesstoken/
`);